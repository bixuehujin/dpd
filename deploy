#! /usr/bin/env python

import os
import json
import shutil

from os import path
from mover import Mover

git_url = os.environ['GIT_URL']
git_path = os.environ['GIT_PATH']
git_branch = os.environ['GIT_BRANCH']
base_dir = os.getcwd();
default_target_path = os.environ['DEFAULT_TARGET_PATH']

target_path = base_dir + '/' + git_path

# GIT_URL=git@git.seiue.com:ichalk/frontend.git GIT_PATH=ichalk/frontend DEFAULT_TARGET_PATH= ./deploy


class Builder(object):

	def __init__(self, path):
		self.path = path
		self.config = None

	def exec_command(self, command):
		os.system("cd %s; %s" % (self.path, command))


	def fetch_repo(self):
		if not path.isdir(self.path):
			os.makedirs(self.path)

		if not os.path.isdir(target_path  + '/.git'):
			self.exec_command("git clone %s . --depth=10" % git_url)			
		else:
			self.exec_command("git reset --hard master && git remote set-url origin %s && git fetch origin && git checkout origin" % git_url)


	def load_config(self):
		if self.config is not None:
			return self.config

		config = {}
		if path.isfile(target_path + '/deployment.json'):
			fd = open(target_path + '/deployment.json')
			config = json.load(fd)
			fd.close()

		if 'targets' not in config:
			config['targets'] = []

		self.config = config

		return self.config


	def install_deps(self, config):

		if path.isfile(self.path + '/package.json'):
			self.exec_command('npm install')

		if path.isfile(self.path + '/bower.json'):
			self.exec_command('bower install')


	def resolve_build_type(self, config):
		build_type = None
		if 'type' in config:
			build_type = config['type']
		elif path.isfile(self.path + '/Gulpfile.js'):
			build_type = 'gulp'
		elif path.isfile(self.path + '/Gruntfile.js'):
			build_type = 'grunt'

		if build_type not in ['gulp', 'grunt', None]:
			raise Error('Build type: %s is not supportted' % build_type)

		return build_type


	def move(self, src, dst, options):
		mover = Mover.createInstance(src, dst, options)
		mover.move()


	def build_target(self, build_type, target):
		if 'branch' in target and target.branch != git_branch:
			return

		if build_type == 'gulp' and 'build' not in target:
			target['build'] = 'gulp build'
		if build_type == 'grunt' and 'build' not in target:
			target['build'] = 'grunt build'

		if build_type is not None:
			self.exec_command(target['build'])

		if not path.exists(self.path + '/' + target['src']):
			print 'error: target %s does not exists' % target['src']
			return

		if 'dst' not in target:
			target['dst'] = default_target_path

		self.move(self.path + '/' + target['src'], target['dst'], target.get('dstOptions', {}))


	def build(self):
		self.fetch_repo()

		config = self.load_config()

		self.install_deps(config)

		build_type = self.resolve_build_type(config)

		for target in config['targets']:
			self.build_target(build_type, target)

	

if __name__ == '__main__':
	builder = Builder(target_path)
	builder.build()
